# IMPORTANT: This file is generated by the cuke_ext gem--edit at your own peril.

require 'cucumber/rails'
require 'json_spec/cucumber'
require 'akephalos'
require 'cuke_ext/cucumber'

Capybara.default_selector = :css

# Akephalos is a headless browser
Capybara.register_driver :akephalos do |app|
  Capybara::Driver::Akephalos.new(app, :validate_scripts => false)
end
Capybara.javascript_driver = :akephalos


# By default, any exception happening in your Rails application will bubble up
# to Cucumber so that your scenario will fail. This is a different from how 
# your application behaves in the production environment, where an error page will 
# be rendered instead.
#
# Sometimes we want to override this default behaviour and allow Rails to rescue
# exceptions and display an error page (just like when the app is running in production).
# Typical scenarios where you want to do this is when you test your error pages.
# There are two ways to allow Rails to rescue exceptions:
#
# 1) Tag your scenario (or feature) with @allow-rescue
#
# 2) Set the value below to true. Beware that doing this globally is not
# recommended as it will mask a lot of errors for you!
#
ActionController::Base.allow_rescue = false

#
# !!! NEVER configure DatabaseCleaner to the strategy :truncation--it will erase the entire dev database
#   (ONLY USE :transaction)
#
begin
  DatabaseCleaner.strategy = :transaction
rescue NameError
  raise "You need to add database_cleaner to your Gemfile (in the :test group) if you wish to use it."
end

# See https://github.com/cucumber/cucumber-rails/blob/master/features/choose_javascript_database_strategy.feature
Cucumber::Rails::Database.javascript_strategy = :transaction

# json_spec method requirement
def last_json
  page.source
end

# test output verbose flag
@verbose = false
